// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;

contract MyShop {
    // Устанавливаем в переменной нашего класса переменную владельца 
    // address - встроенный метод которыый должен содержать данные о владельце смартконтракта
    address public owner;

    // mapping - подобие массва, address - ключ, uint - целочисленное не отрицательное значение
    mapping (address => uint) public payments;

    // Вызовется автоматически 1 раз когда смарт-контракт будет помещен в блокчейн 
    constructor() {
        // В конструкторе необходимо присвоить переменной значения
        // msg - глобальный обьект(сообщение которое было получено, сама странзакция)
        // sender - свойство возвращающая адрес отправителя
        owner = msg.sender;
    }

    // public - Чтобы функцию могли вызывать из-вне покупатели необходимо сделать ее публичной
    // payable - модификатор который указывае на функции которые предназначение для отправки денег, если его не указать деньги будут отправлены обратно отправителю
    function payForItem() public payable {
        // По сути в теле функции больше ничего писать нет необходимочсти
        // поскольку уже указан модификатор и при обращении к данной ф-ции средства будут зачислены на адрес указаный в смартконтракте

        // Записываем кто нам перевекл и сколько
        payments][msg.sender] = msg.value;
    }
}
